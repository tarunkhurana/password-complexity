{"version":3,"sources":["reducers/initialState.js","actions/actionTypes.js","service/ValidationService.js","reducers/meterReducer.js","reducers/index.js","reducers/passwordReducer.js","store.js","components/Password.js","components/PasswordCriteria.js","components/Checkbox.js","components/ComplexityMeter.js","components/RulesList.js","components/PasswordStrength.jsx","actions/changePassword.js","actions/changePasswordType.js","actions/focusPassword.js","containers/PasswordStrength.jsx","components/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["password","checked","value","meter","show","CHANGE_PASSWORD","FOCUS_PASSWORD","CHANGE_PASSWORD_TYPE","hasSequential","pwd","characters","i","length","str","substring","revStr","split","reverse","join","toLowerCase","indexOf","hasSequentialLetters","hasSequentialNumbers","hasSequentialSymbols","hasRepeatedCharacters","previous","j","current","getComplexValidationRules","hasLettersOnly","test","hasNumbersOnly","hasConsecutiveUppercaseLetters","hasConsecutiveLowercaseLetters","hasConsecutiveNumbers","getStrictValidationRules","isValidLength","getRules","strictValidationRules","complexValidationRules","getMeterWidth","strictValidationRulesWeightage","rules","propertyCount","validPropertyCount","property","hasOwnProperty","getStrictValidationRulesWeightage","complexValidationRulesWeightage","getComplexValidationRulesWeightage","width","getMeterProps","feedback","getMeterFeedback","defaultState","initialState","combineReducers","state","action","type","payload","getPassword","getPasswordType","showPassword","showMeter","createSelector","getRulesList","validRulesList","invalidRulesList","enhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createLogger","Password","React","memo","onChangePassword","onFocusPassword","htmlFor","id","name","placeholder","className","onChange","e","target","onFocus","PasswordCriteria","Checkbox","onChangePasswordType","ComplexityMeter","style","RulesList","Object","keys","map","key","index","String","defaultProps","PasswordStrength","props","meterWidth","meterFeedback","connect","dispatch","bindActionCreators","changePasswordAction","changePasswordTypeAction","focusPasswordAction","Layout","store","createStore","rootReducer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c85e16fa.chunk.js","sourcesContent":["// Initial state for password and password complexity meter\r\nexport default {\r\n  password: {\r\n    checked: false,\r\n    value: '',\r\n  },\r\n  meter: {\r\n    show: false,\r\n  },\r\n};\r\n","export const CHANGE_PASSWORD = 'CHANGE_PASSWORD';\r\nexport const FOCUS_PASSWORD = 'FOCUS_PASSWORD';\r\nexport const CHANGE_PASSWORD_TYPE = 'CHANGE_PASSWORD_TYPE';\r\n","/**\r\n * validating sequence of characters in a string\r\n * @param pwd contains password value\r\n * @param characters contains characters could be string, numbers or symbols\r\n * @returns {boolean} true/false\r\n */\r\nconst hasSequential = (pwd, characters) => {\r\n  for (let i = 0; i < characters.length - 1; i += 1) {\r\n    const str = characters.substring(i, i + 2);\r\n    const revStr = str.split('').reverse().join('');\r\n    if (\r\n      pwd.toLowerCase().indexOf(str) !== -1 ||\r\n      pwd.toLowerCase().indexOf(revStr) !== -1\r\n    ) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/**\r\n * validating sequence of letters in a string\r\n * @param value contains password value\r\n * @returns {boolean} true/false\r\n */\r\nconst hasSequentialLetters = (value) => {\r\n  const alphabets = 'abcdefghijklmnopqrstuvwxyz';\r\n  return hasSequential(value, alphabets);\r\n};\r\n\r\n/**\r\n * validating sequence of numbers in a string\r\n * @param value contains password value\r\n * @returns {boolean} true/false\r\n */\r\nconst hasSequentialNumbers = (value) => {\r\n  const numbers = '01234567890';\r\n  return hasSequential(value, numbers);\r\n};\r\n\r\n/**\r\n * validating sequence of symbols in a string\r\n * @param value contains password value\r\n * @returns {boolean} true/false\r\n */\r\nconst hasSequentialSymbols = (value) => {\r\n  const symbols = ')!@#$%^&*()';\r\n  return hasSequential(value, symbols);\r\n};\r\n\r\n/**\r\n * validating repeated charactes in password\r\n * @param value contains password value\r\n * @returns {boolean} true/false\r\n */\r\nconst hasRepeatedCharacters = (value) => {\r\n  for (let i = 0; i < value.length; i += 1) {\r\n    const previous = value[i];\r\n    for (let j = i + 1; j < value.length; j += 1) {\r\n      const current = value[j];\r\n      if (previous.toLowerCase() === current.toLowerCase()) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/**\r\n * validating multiple validations of password value using regex\r\n * @param value contains password value\r\n * @returns {object} contains validations rules\r\n */\r\nconst getComplexValidationRules = (value) => {\r\n  return {\r\n    hasLettersOnly: value ? /^[a-zA-Z]*$/.test(value) : false,\r\n    hasNumbersOnly: value ? /^[0-9]*$/.test(value) : false,\r\n    hasRepeatedCharacters: hasRepeatedCharacters(value),\r\n    hasConsecutiveUppercaseLetters: value ? /([A-Z]){2}/.test(value) : false,\r\n    hasConsecutiveLowercaseLetters: value ? /([a-z]){2}/.test(value) : false,\r\n    hasConsecutiveNumbers: value ? /\\d{2}/.test(value) : false,\r\n    hasSequentialLetters: value ? hasSequentialLetters(value) : false,\r\n    hasSequentialNumbers: value ? hasSequentialNumbers(value) : false,\r\n    hasSequentialSymbols: value ? hasSequentialSymbols(value) : false,\r\n  };\r\n};\r\n\r\n/**\r\n * get weightage for complex validations with the help of this password strength gets increased or decreased\r\n * @param value contains password value\r\n * @returns {number} weightage in percentage\r\n */\r\nconst getComplexValidationRulesWeightage = (value) => {\r\n  const rules = getComplexValidationRules(value);\r\n  let propertyCount = 0;\r\n  let validPropertyCount = 0;\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  for (const property in rules) {\r\n    // eslint-disable-next-line no-prototype-builtins\r\n    if (rules.hasOwnProperty(property)) {\r\n      propertyCount += 1;\r\n      if (rules[property]) {\r\n        validPropertyCount += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  return (validPropertyCount / propertyCount) * 40;\r\n};\r\n\r\n/**\r\n * validating multiple validations of password value using regex\r\n * @param value contains password value\r\n * @returns {object} contains validations rules\r\n */\r\nconst getStrictValidationRules = (value) => {\r\n  return {\r\n    isValidLength: value ? /^.{8,}$/.test(value) : false,\r\n    // eslint-disable-next-line\r\n    ['shouldMetAtleastThreeCases(UppercaseLetters,LowerCaseLetters,Numbers,Symbols)']: value\r\n      ? /(((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])|(?=.*\\d)(?=.*[a-zA-Z])(?=.*[\\W_])|(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W_])).*)/.test(\r\n          value\r\n        )\r\n      : false,\r\n  };\r\n};\r\n\r\n/**\r\n * get weightage for strict validations with the help of this password strength gets increased or decreased\r\n * @param value contains password value\r\n * @returns {number} weightage in percentage\r\n */\r\nconst getStrictValidationRulesWeightage = (value) => {\r\n  const rules = getStrictValidationRules(value);\r\n  let propertyCount = 0;\r\n  let validPropertyCount = 0;\r\n\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  for (const property in rules) {\r\n    // eslint-disable-next-line no-prototype-builtins\r\n    if (rules.hasOwnProperty(property)) {\r\n      propertyCount += 1;\r\n      if (rules[property]) {\r\n        validPropertyCount += 1;\r\n      }\r\n    }\r\n  }\r\n  return (validPropertyCount / propertyCount) * 100;\r\n};\r\n\r\n/**\r\n * get combined validations rules\r\n * @param value contains password value\r\n * @returns {object} list of validation rules\r\n */\r\nexport const getRules = (value) => {\r\n  return {\r\n    strictValidationRules: getStrictValidationRules(value),\r\n    complexValidationRules: getComplexValidationRules(value),\r\n  };\r\n};\r\n\r\n/**\r\n * get width of meter with the help of valid or invalid password based on certain rules\r\n * @param value contains password value\r\n * @returns {number} meter width\r\n */\r\nexport const getMeterWidth = (value) => {\r\n  const strictValidationRulesWeightage = getStrictValidationRulesWeightage(\r\n    value\r\n  );\r\n  const complexValidationRulesWeightage = getComplexValidationRulesWeightage(\r\n    value\r\n  );\r\n\r\n  const width =\r\n    strictValidationRulesWeightage - complexValidationRulesWeightage;\r\n  return width < 0 ? complexValidationRulesWeightage : width;\r\n};\r\n\r\n/**\r\n * get feedback of meter with the help of meter width based on multiple conditions\r\n * @param value contains password value\r\n * @returns {string} meter feedback\r\n */\r\n// eslint-disable-next-line consistent-return\r\nexport const getMeterFeedback = (width) => {\r\n  if (width >= 0 && width <= 20) {\r\n    return 'Very Weak';\r\n  }\r\n  if (width > 20 && width <= 40) {\r\n    return 'Weak';\r\n  }\r\n  if (width > 40 && width <= 60) {\r\n    return 'Good';\r\n  }\r\n  if (width > 60 && width <= 80) {\r\n    return 'Very Good';\r\n  }\r\n  if (width > 80 && width <= 95) {\r\n    return 'Strong';\r\n  }\r\n  if (width > 95 && width <= 100) {\r\n    return 'Very Strong';\r\n  }\r\n};\r\n","import initialState from './initialState';\r\nimport { CHANGE_PASSWORD, FOCUS_PASSWORD } from '../actions/actionTypes';\r\nimport { getMeterWidth, getMeterFeedback } from '../service/ValidationService';\r\n/**\r\n * Redux selector to encapsulate the logic of retrieving a password meter data\r\n * @param value contains password value\r\n * @returns {object} password meter data\r\n */\r\nconst getMeterProps = (value) => {\r\n  const width = getMeterWidth(value);\r\n  const feedback = getMeterFeedback(width);\r\n  return {\r\n    width,\r\n    feedback,\r\n  };\r\n};\r\n\r\n// updated default state of password meter to get meter props\r\n// becuase we have initial state and possible update password\r\n// values to have some default values initially\r\nconst defaultState = {\r\n  show: initialState.meter.show,\r\n  ...getMeterProps(initialState.password.value),\r\n};\r\n\r\nexport default (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case CHANGE_PASSWORD: {\r\n      const { value } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        ...getMeterProps(value),\r\n      };\r\n    }\r\n    case FOCUS_PASSWORD:\r\n      return {\r\n        ...state,\r\n        show: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createSelector } from 'reselect';\r\nimport passwordReducer from './passwordReducer';\r\nimport meterReducer from './meterReducer';\r\n\r\nexport default combineReducers({\r\n  password: passwordReducer,\r\n  meter: meterReducer,\r\n});\r\n\r\nexport const getPasswordReducer = (state) => state.password;\r\n/**\r\n * State Selector method that retreives password\r\n * @param state Full redux state\r\n * @returns {string} password\r\n */\r\nexport const getPassword = (state) => state.password.value;\r\n/**\r\n * State Selector method that retreives type of password\r\n * @param state Full redux state\r\n * @returns {string} text or password type value\r\n */\r\nexport const getPasswordType = (state) =>\r\n  state.password.checked ? 'text' : 'password';\r\n/**\r\n * State Selector method that retreives boolean value\r\n * @param state Full redux state\r\n * @returns {string} true/false\r\n */\r\nexport const showPassword = (state) => state.password.checked;\r\n/**\r\n * State Selector method that retreives boolean value\r\n * @param state Full redux state\r\n * @returns {boolean} true/false\r\n */\r\nexport const showMeter = (state) => state.meter.show;\r\n/**\r\n * State Selector method that retreives password meter width\r\n * @param state Full redux state\r\n * @returns {number} password meter width\r\n */\r\nexport const getMeterWidth = (state) => state.meter.width;\r\n/**\r\n * State Selector method that password meter feedback based on input value in password\r\n * @param state Full redux state\r\n * @returns {string} meter feedback\r\n */\r\nexport const getMeterFeedback = (state) => state.meter.feedback;\r\n\r\nexport const getRules = createSelector([getPasswordReducer], (password) => {\r\n  return password.rules;\r\n});\r\n\r\nexport const getStrictValidationRules = createSelector([getRules], (rules) => {\r\n  return rules && rules.strictValidationRules;\r\n});\r\n\r\nexport const getComplexValidationRules = createSelector(\r\n  [getRules],\r\n  (rules) => rules && rules.complexValidationRules\r\n);\r\n\r\n/**\r\n * State Selector method that retreives rules list\r\n * @param state Full redux state\r\n * @returns {string} password\r\n */\r\n\r\n// eslint-disable-next-line consistent-return\r\nexport const getRulesList = createSelector(\r\n  [getStrictValidationRules, getComplexValidationRules],\r\n  (strictValidationRules, complexValidationRules) => {\r\n    if (strictValidationRules && complexValidationRules) {\r\n      return {\r\n        validRulesList: strictValidationRules,\r\n        invalidRulesList: complexValidationRules,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n);\r\n","import initialState from './initialState';\r\nimport { CHANGE_PASSWORD, CHANGE_PASSWORD_TYPE } from '../actions/actionTypes';\r\nimport { getRules } from '../service/ValidationService';\r\n\r\nexport default (state = initialState.password, action) => {\r\n  switch (action.type) {\r\n    case CHANGE_PASSWORD: {\r\n      const { payload } = action;\r\n      const { value } = payload;\r\n      return {\r\n        ...state,\r\n        value,\r\n        rules: { ...getRules(value) },\r\n      };\r\n    }\r\n    case CHANGE_PASSWORD_TYPE: {\r\n      const { payload } = action;\r\n      const { checked } = payload;\r\n      return {\r\n        ...state,\r\n        checked,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst enhancers = composeEnhancers(applyMiddleware(...[createLogger()]));\r\n\r\nexport default () => {\r\n  // return createStore(rootReducer, applyMiddleware(createLogger()));\r\n  return createStore(rootReducer, enhancers);\r\n};\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Password = React.memo(function Password({\n  type,\n  value,\n  onChangePassword,\n  onFocusPassword,\n}) {\n  return (\n    <span>\n      <label htmlFor=\"password\">Enter Password</label>\n      <input\n        id=\"password\"\n        name=\"password\"\n        type={type}\n        value={value}\n        placeholder=\"Enter Password...\"\n        className=\"form-control\"\n        onChange={(e) => onChangePassword(e.target.value)}\n        onFocus={() => onFocusPassword()}\n      />\n    </span>\n  );\n});\n\nPassword.propTypes = {\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChangePassword: PropTypes.func.isRequired,\n  onFocusPassword: PropTypes.func.isRequired,\n};\n\nexport default Password;\n","import React from 'react';\r\n\r\nconst PasswordCriteria = React.memo(function PasswordCriteria() {\r\n  return (\r\n    <div>\r\n      <h4>Password Criteria</h4>\r\n      <ul>\r\n        <li>Minimum 8 characters in length</li>\r\n        <li>\r\n          Contains 3/4 of the following items:\r\n          <ul>\r\n            <li>Uppercase Letters</li>\r\n            <li>Lowercase Letters</li>\r\n            <li>Numbers</li>\r\n            <li>Symbols</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n      <h5>The password strength score should get lowered based on </h5>\r\n      <ul>\r\n        <li>Entering Letter only </li>\r\n        <li>Entering Numbers only</li>\r\n        <li>Repeated characters (Case insensitive)</li>\r\n        <li>Consecutive Uppercase Letters </li>\r\n        <li>Consecutive Lowercase Letters</li>\r\n        <li>Consecutive Numbers</li>\r\n        <li>Sequential Letters</li>\r\n        <li>Sequential Numbers </li>\r\n        <li>Sequential Symbols </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default PasswordCriteria;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Checkbox = React.memo(function Checkbox({\r\n  checked,\r\n  onChangePasswordType,\r\n}) {\r\n  return (\r\n    <label htmlFor=\"show-password\">\r\n      <input\r\n        id=\"show-password\"\r\n        name=\"show-password\"\r\n        type=\"checkbox\"\r\n        checked={checked}\r\n        onChange={(e) => onChangePasswordType(e.target.checked)}\r\n      />\r\n      {checked ? 'Hide Password' : 'Show Password'}\r\n    </label>\r\n  );\r\n});\r\n\r\nCheckbox.propTypes = {\r\n  checked: PropTypes.bool.isRequired,\r\n  onChangePasswordType: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Checkbox;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ComplexityMeter.css';\r\n\r\nconst ComplexityMeter = React.memo(function ComplexityMeter({\r\n  width,\r\n  feedback,\r\n}) {\r\n  return (\r\n    <div>\r\n      <h4>{feedback}</h4>\r\n      <div className=\"pcm-validation-meter-wrapper\">\r\n        <div\r\n          className={`pcm-validation-meter-progress ${feedback\r\n            .split(' ')\r\n            .join('-')\r\n            .toLowerCase()}`}\r\n          style={{ width: `${width}%` }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nComplexityMeter.propTypes = {\r\n  width: PropTypes.number.isRequired,\r\n  feedback: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ComplexityMeter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './RulesList.css';\r\n\r\nconst RulesList = React.memo(function RulesList({ rules }) {\r\n  if (!rules) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"pcm-rules-list row\">\r\n      <div className=\"col-md-6\">\r\n        <h4>Valid Rules List</h4>\r\n        <ul className=\"list-group\">\r\n          {Object.keys(rules.validRulesList).map((key, index) => {\r\n            return (\r\n              <li\r\n                className={`list-group-item ${\r\n                  rules.validRulesList[key] ? 'list-group-item-success' : ''\r\n                }`}\r\n                // eslint-disable-next-line react/no-array-index-key\r\n                key={index}\r\n              >\r\n                <span>\r\n                  {`${key}-`}\r\n                  <span className=\"rule-value\">\r\n                    {String(rules.validRulesList[key])}\r\n                  </span>\r\n                </span>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Invalid Rules List</h4>\r\n        <ul className=\"list-group\">\r\n          {Object.keys(rules.invalidRulesList).map((key, index) => {\r\n            return (\r\n              <li\r\n                className={`list-group-item ${\r\n                  rules.invalidRulesList[key] ? 'list-group-item-danger' : ''\r\n                }`}\r\n                // eslint-disable-next-line react/no-array-index-key\r\n                key={index}\r\n              >\r\n                <span>\r\n                  {`${key}-`}\r\n                  <span className=\"rule-value\">\r\n                    {String(rules.invalidRulesList[key])}\r\n                  </span>\r\n                </span>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nRulesList.propTypes = {\r\n  rules: PropTypes.shape({\r\n    validRulesList: PropTypes.shape({}).isRequired,\r\n    invalidRulesList: PropTypes.shape({}).isRequired,\r\n  }),\r\n};\r\n\r\nRulesList.defaultProps = {\r\n  rules: null,\r\n};\r\n\r\nexport default RulesList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Password from './Password';\r\nimport PasswordCriteria from './PasswordCriteria';\r\nimport Checkbox from './Checkbox';\r\nimport ComplexityMeter from './ComplexityMeter';\r\nimport RulesList from './RulesList';\r\n\r\nconst PasswordStrength = (props) => {\r\n  const {\r\n    value,\r\n    checked,\r\n    type,\r\n    showMeter,\r\n    meterWidth,\r\n    meterFeedback,\r\n    rules,\r\n    onChangePassword,\r\n    onFocusPassword,\r\n    onChangePasswordType,\r\n  } = props;\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Password Complexity Meter</h1>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"pcm-password-strength\">\r\n            <hr />\r\n            <Password\r\n              value={value}\r\n              type={type}\r\n              onChangePassword={onChangePassword}\r\n              onFocusPassword={onFocusPassword}\r\n            />\r\n            <Checkbox\r\n              checked={checked}\r\n              onChangePasswordType={onChangePasswordType}\r\n            />\r\n            {showMeter ? (\r\n              <ComplexityMeter width={meterWidth} feedback={meterFeedback} />\r\n            ) : (\r\n              ''\r\n            )}\r\n            <hr />\r\n            <RulesList rules={rules} />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <PasswordCriteria />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nPasswordStrength.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  checked: PropTypes.bool.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  showMeter: PropTypes.bool.isRequired,\r\n  meterWidth: PropTypes.number.isRequired,\r\n  meterFeedback: PropTypes.string.isRequired,\r\n  rules: PropTypes.shape({}),\r\n  onChangePassword: PropTypes.func.isRequired,\r\n  onFocusPassword: PropTypes.func.isRequired,\r\n  onChangePasswordType: PropTypes.func.isRequired,\r\n};\r\n\r\nPasswordStrength.defaultProps = {\r\n  rules: null,\r\n};\r\n\r\nexport default PasswordStrength;\r\n","import { CHANGE_PASSWORD } from './actionTypes';\r\n\r\nexport default (value) => {\r\n  return {\r\n    type: CHANGE_PASSWORD,\r\n    payload: {\r\n      value,\r\n    },\r\n  };\r\n};\r\n","import { CHANGE_PASSWORD_TYPE } from './actionTypes';\r\n\r\nexport default (checked) => {\r\n  return {\r\n    type: CHANGE_PASSWORD_TYPE,\r\n    payload: {\r\n      checked,\r\n      type: checked ? 'text' : 'password',\r\n    },\r\n  };\r\n};\r\n","import { FOCUS_PASSWORD } from './actionTypes';\r\n\r\nexport default () => {\r\n  return {\r\n    type: FOCUS_PASSWORD,\r\n  };\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport PasswordStrength from '../components/PasswordStrength';\r\nimport changePasswordAction from '../actions/changePassword';\r\nimport changePasswordTypeAction from '../actions/changePasswordType';\r\nimport focusPasswordAction from '../actions/focusPassword';\r\nimport {\r\n  getPassword,\r\n  getPasswordType,\r\n  showPassword,\r\n  showMeter,\r\n  getMeterWidth,\r\n  getMeterFeedback,\r\n  getRulesList,\r\n} from '../reducers';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: getPassword(state),\r\n  checked: showPassword(state),\r\n  type: getPasswordType(state),\r\n  showMeter: showMeter(state),\r\n  meterWidth: getMeterWidth(state),\r\n  meterFeedback: getMeterFeedback(state),\r\n  rules: getRulesList(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      onChangePassword: changePasswordAction,\r\n      onChangePasswordType: changePasswordTypeAction,\r\n      onFocusPassword: focusPasswordAction,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordStrength);\r\n","import React from 'react';\nimport PasswordStrength from '../containers/PasswordStrength';\n\nconst Layout = () => {\n  return (\n    <div>\n      <PasswordStrength />\n    </div>\n  );\n};\nexport default Layout;\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport configStore from './store';\nimport Layout from './components/Layout';\n\nconst store = configStore();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Layout />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}